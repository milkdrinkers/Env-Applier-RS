name: Stage

on:
  workflow_call:
    inputs:
      os:
        description: "The os the workflow shold use"
        required: false
        type: string
        default: ubuntu-latest

permissions:
  attestations: write
  contents: write
  id-token: write

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: ea

jobs:
  stage-version:
    name: "Update Project Version"
    runs-on: ${{ inputs.os }}
    if: github.ref_type == 'tag'
    steps:
      # Checkout repository
      - name: Checkout Repository
        if: contains(github.ref_name, '-RC-') == false
        uses: actions/checkout@v4

      # Update version field in project file
      - name: Update Project Version
        if: contains(github.ref_name, '-RC-') == false
        shell: bash
        run: |
          sed -i 's/version = "[0-9.]*"$/version = "${{ github.ref_name }}"/' Cargo.toml

      # Commit and push updated version file
      - name: Update repository
        if: contains(github.ref_name, '-RC-') == false
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: bump version to v${{ github.ref_name  }}"
          branch: ${{ github.event.repository.default_branch }}

  stage-build-release:
    name: "Build Release"
    needs: stage-version
    strategy:
      matrix:
        include:
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-gnu
            os: ubuntu-latest
          - target: aarch64-pc-windows-msvc
            os: windows-latest
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-unknown-freebsd
            os: ubuntu-latest
          - target: riscv64gc-unknown-linux-gnu
            os: ubuntu-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ matrix.target }}
          toolchain: stable

      - name: Install cross-compilation tools
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          case "${{ matrix.target }}" in
            "x86_64-pc-windows-gnu")
              sudo apt-get install -y mingw-w64
              ;;
            "aarch64-unknown-linux-gnu")
              sudo apt-get install -y gcc-aarch64-linux-gnu
              ;;
            "x86_64-unknown-freebsd")
              sudo apt-get install -y clang
              ;;
            "riscv64gc-unknown-linux-gnu")
              sudo apt-get install -y gcc-riscv64-linux-gnu
              ;;
          esac
        shell: bash

      - name: Install cross
        run: cargo install cross

      - name: Build release binary
        run: cross build --release --target ${{ matrix.target }}

      - name: Prepare artifacts
        shell: bash
        run: |
          # Create artifact directory
          mkdir -p artifacts
          
          # Copy binary with target-specific naming
          if [[ "${{ matrix.target }}" == "x86_64-pc-windows-gnu" || "${{ matrix.target }}" == "aarch64-pc-windows-msvc" ]]; then
            cp "target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}.exe" "artifacts/${{ env.BINARY_NAME }}-${{ matrix.target }}.exe"
          else
            cp "target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}" "artifacts/${{ env.BINARY_NAME }}-${{ matrix.target }}"
          fi

      - name: Generate Build Provenance Attestations
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: "artifacts/*"

      - name: Upload Release Assets
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-binary
          path: artifacts/*
          retention-days: 1
